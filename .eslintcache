[{"C:\\reactProject\\groupchat\\src\\index.js":"1","C:\\reactProject\\groupchat\\src\\reportWebVitals.js":"2","C:\\reactProject\\groupchat\\src\\App.js":"3","C:\\reactProject\\groupchat\\src\\components\\Header.js":"4","C:\\reactProject\\groupchat\\src\\components\\Message.js":"5","C:\\reactProject\\groupchat\\src\\components\\SubmitMessage.js":"6","C:\\reactProject\\groupchat\\src\\testData.js":"7","C:\\reactProject\\groupchat\\src\\components\\GetMessages.js":"8"},{"size":500,"mtime":499162500000,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"11","hashOfConfig":"10"},{"size":3235,"mtime":1609608566272,"results":"12","hashOfConfig":"10"},{"size":546,"mtime":1609192850834,"results":"13","hashOfConfig":"10"},{"size":2409,"mtime":1609611805279,"results":"14","hashOfConfig":"10"},{"size":1442,"mtime":1609192850842,"results":"15","hashOfConfig":"10"},{"size":1610,"mtime":1609192850847,"results":"16","hashOfConfig":"10"},{"size":1592,"mtime":1609612527612,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"h9pzy9",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"C:\\reactProject\\groupchat\\src\\index.js",[],["39","40"],"C:\\reactProject\\groupchat\\src\\reportWebVitals.js",[],"C:\\reactProject\\groupchat\\src\\App.js",["41","42","43"],"import './App.css';\r\nimport firebase from 'firebase/app';\r\nimport \"firebase/firestore\"\r\nimport \"firebase/auth\"\r\n\r\nimport { useAuthState } from \"react-firebase-hooks/auth\"\r\n\r\n// Components\r\nimport Header from \"./components/Header\"\r\nimport SubmitMessage from \"./components/SubmitMessage\"\r\nimport GetMessages from \"./components/GetMessages\"\r\n\r\n// Images\r\nimport logout from './images/logout.png';\r\nimport Google from './images/google.png';\r\nimport GoogleLogo from './images/googleLogo.png';\r\n\r\nconst TEST_MESSAGES = false\r\nconst ENABLE_SUBMIT = true\r\n\r\n\r\n\r\n// Firebase config credentials (declared in .env)\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_SENDER_ID,\r\n  appId: process.env.REACT_APP_ID,\r\n  measurementId: process.env.REACT_APP_MEASUREMENT_ID\r\n}\r\n\r\n// Connect to Firebase db\r\nfirebase.initializeApp(firebaseConfig)\r\nconst auth = firebase.auth()\r\nconst firestore = firebase.firestore()\r\n\r\n\r\n\r\nfunction SignIn() {\r\n  const signInWithGoogle = () => {\r\n    const provider = new firebase.auth.GoogleAuthProvider()\r\n    auth.signInWithPopup(provider).then(token => {\r\n      // Save logins for all users\r\n      const { user } = token \r\n      const addUser = (async () => {\r\n        const collectionName = firestore.collection(\"users\")\r\n        await collectionName.add({\r\n          uid: user.uid,\r\n          name: user.displayName,\r\n          photoURL: user.photoURL,\r\n          email: user.email,\r\n          time: firebase.firestore.FieldValue.serverTimestamp()\r\n        })\r\n      })()\r\n    })\r\n  }\r\n  return (\r\n    <img \r\n      className=\"google-signin contariner\"\r\n      onClick={signInWithGoogle}\r\n      src={GoogleLogo}\r\n      alt=\"Sign in with google\"/>\r\n  )\r\n}\r\n\r\nfunction SignOut() {\r\n  const signOutFromGoogle = () => {\r\n    if (auth.currentUser) {\r\n      auth.signOut()\r\n    }\r\n  }\r\n  \r\n  return (\r\n    <img\r\n      className=\"logout-pic\"\r\n      src={logout}\r\n      alt=\":)\"\r\n      onClick={signOutFromGoogle}\r\n    /> \r\n  )\r\n}\r\n\r\nfunction sendMessage(text) {\r\n  const msg = text.trim()\r\n  if (msg === \"\") {\r\n    console.log(\"Message is empty\")\r\n  }\r\n  else {\r\n    if (!ENABLE_SUBMIT) {\r\n      alert(\"Test mode on\")\r\n    } else {\r\n      const addMessage = (async () => {\r\n        const collectionName = firestore.collection(\"messages\")\r\n        const user = auth.currentUser\r\n    \r\n        await collectionName.add({\r\n          message: msg,\r\n          userID: user.uid,\r\n          time: firebase.firestore.FieldValue.serverTimestamp(),\r\n          photoURL: user.photoURL,\r\n          name: user.displayName\r\n        })\r\n      })()\r\n    }\r\n  }\r\n}\r\n\r\nfunction App() {\r\n  const [user] = useAuthState(auth)\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header user={user} signOut={<SignOut />} />  \r\n      {user == null && <SignIn /> }\r\n      <div className=\"contariner\"></div>\r\n      {user && <GetMessages\r\n        user={user}\r\n        firestore={firestore}\r\n        test_messages={TEST_MESSAGES}/> }\r\n      {user && <SubmitMessage sendMsg={sendMessage}/> }\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default App;\r\n","C:\\reactProject\\groupchat\\src\\components\\Header.js",[],"C:\\reactProject\\groupchat\\src\\components\\Message.js",["44","45"],"import React, { Component, useEffect, useRef } from \"react\"\r\nimport Linkify from 'react-linkify';\r\n\r\n// Images\r\nimport avatar from \"../images/avatar.png\"\r\n\r\nclass Message extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            showName: false\r\n        }\r\n    }\r\n\r\n    parseDate(time) {\r\n        if (time) {\r\n            const d = time.toDate().toString().split(\" \")\r\n            const t = d[4].split(\":\")\r\n            return `${d[2]}/${d[1]}/${d[3]} ${t[0]}:${t[1]}`\r\n        }\r\n    \r\n        return null\r\n    }\r\n\r\n    mouseOverHandler(e) {\r\n        e.preventDefault()\r\n        if (!this.state.showName) {\r\n            this.setState({\r\n                showName: true\r\n            })\r\n        }\r\n    }\r\n\r\n    mouseLeaveHandler(e) {\r\n        e.preventDefault()\r\n        if (this.state.showName) {\r\n            this.setState({\r\n                showName: false\r\n            })\r\n        }\r\n    }\r\n\r\n    render() {  \r\n        const {\r\n            msg,\r\n            isMe,\r\n            time,\r\n            photoURL,\r\n            last,\r\n            name\r\n        } = this.props\r\n\r\n        const profilePic = (() => {\r\n            return photoURL ? photoURL : avatar\r\n        })()\r\n        const date = this.parseDate(time)\r\n\r\n        return (\r\n\r\n            <div className={ `${last} ${isMe ? \"my-text-container\" : \"your-text-container\"}` }>\r\n                <div className={ `${isMe ? \"pic-right\" : \"pic-left\"}`}>\r\n                    <img className=\"msg-pic\" src={profilePic} alt=\":)\" />\r\n                </div>\r\n                <div onMouseOver={(e) => this.mouseOverHandler(e)}\r\n                    onMouseLeave={(e) => this.mouseLeaveHandler(e)}\r\n                    className={ `msg-text ${isMe ? \"my-text\" : \"your-text\"}` }>\r\n                    <Linkify componentDecorator={(decoratedHref, decoratedText, key) => (\r\n                            <a target=\"blank\" className=\"linkify-a\" href={decoratedHref} key={key}>{msg}</a>\r\n                        )}>\r\n                            {msg}\r\n                    </Linkify>\r\n                    <div className=\"msg-date\">\r\n                        {date}\r\n                    </div>\r\n                </div>\r\n                { this.state.showName && \r\n                    <div className={ `${isMe ? \"my-name\" : \"your-name\"}`}>{name}</div> \r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message","C:\\reactProject\\groupchat\\src\\components\\SubmitMessage.js",[],"C:\\reactProject\\groupchat\\src\\testData.js",[],["46","47"],"C:\\reactProject\\groupchat\\src\\components\\GetMessages.js",["48","49"],"import React, { useEffect, useRef } from \"react\"\r\nimport { useCollectionData } from \"react-firebase-hooks/firestore\"\r\n\r\n// Components\r\nimport Message from \"./Message\"\r\n\r\nfunction GetMessages(props) {\r\n    const TEST_MESSAGES = props.test_messages\r\n    const firestore = props.firestore\r\n    const user = props.user\r\n\r\n    let messages = [];\r\n    const messageID = firestore.collection(\"messages\")\r\n    //console.log(\"MsgID:\", messageID)\r\n\r\n    const query = messageID.orderBy(\"time\", \"desc\").limit(20)\r\n\r\n    messages = useCollectionData(query,  {idField: \"id\"})\r\n\r\n    const messagesEndRef = useRef(null)\r\n\r\n    const scrollToBottom = () => {\r\n      console.log(\"ref\", messagesEndRef)\r\n      messagesEndRef.current.scrollIntoView({ behavior: \"smooth\" })\r\n    }\r\n  \r\n    useEffect(scrollToBottom, [messages]);\r\n  \r\n    let showContent = null\r\n    if (messages[0] !== undefined) {\r\n      const len = messages[0].length\r\n      showContent = messages[0].reverse().map((msg, i) => {\r\n        const isMe = user && user.uid === msg.userID\r\n        const last = (i + 1 === len) ? \"last-msg\" : \"\"\r\n        const msgPic = msg.photoURL\r\n  \r\n        return (\r\n          <Message\r\n            key={Math.random()}\r\n            msg={msg.message}\r\n            isMe={isMe}\r\n            time={msg.time}\r\n            photoURL={msgPic}\r\n            last={last}\r\n            name={msg.name}\r\n          />\r\n        )\r\n      })\r\n    }\r\n  \r\n    return (\r\n      <div>\r\n        { showContent }\r\n        <div ref={messagesEndRef} className=\"my-text-container\" />\r\n      </div>\r\n    )\r\n  }\r\n\r\nexport default GetMessages",{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":15,"column":8,"nodeType":"56","messageId":"57","endLine":15,"endColumn":14},{"ruleId":"54","severity":1,"message":"58","line":47,"column":13,"nodeType":"56","messageId":"57","endLine":47,"endColumn":20},{"ruleId":"54","severity":1,"message":"59","line":94,"column":13,"nodeType":"56","messageId":"57","endLine":94,"endColumn":23},{"ruleId":"54","severity":1,"message":"60","line":1,"column":28,"nodeType":"56","messageId":"57","endLine":1,"endColumn":37},{"ruleId":"54","severity":1,"message":"61","line":1,"column":39,"nodeType":"56","messageId":"57","endLine":1,"endColumn":45},{"ruleId":"50","replacedBy":"62"},{"ruleId":"52","replacedBy":"63"},{"ruleId":"54","severity":1,"message":"64","line":8,"column":11,"nodeType":"56","messageId":"57","endLine":8,"endColumn":24},{"ruleId":"65","severity":1,"message":"66","line":12,"column":9,"nodeType":"67","endLine":12,"endColumn":22},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Google' is defined but never used.","Identifier","unusedVar","'addUser' is assigned a value but never used.","'addMessage' is assigned a value but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.",["68"],["69"],"'TEST_MESSAGES' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'messages' array makes the dependencies of useEffect Hook (at line 27) change on every render. To fix this, wrap the initialization of 'messages' in its own useMemo() Hook.","VariableDeclarator","no-global-assign","no-unsafe-negation"]